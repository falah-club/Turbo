/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Event_duration}
 */
// @ts-ignore
export function createEvent_durationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEvent_duration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Event}
 */
// @ts-ignore
export function createEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Geo}
 */
// @ts-ignore
export function createGeoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGeo;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEvent(event: Partial<Event> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categories": n => { event.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "description": n => { event.description = n.getStringValue(); },
        "duration": n => { event.duration = n.getCollectionOfObjectValues<Event_duration>(createEvent_durationFromDiscriminatorValue); },
        "geo": n => { event.geo = n.getObjectValue<Geo>(createGeoFromDiscriminatorValue); },
        "location": n => { event.location = n.getStringValue(); },
        "product_id": n => { event.productId = n.getStringValue(); },
        "sequence": n => { event.sequence = n.getNumberValue(); },
        "start": n => { event.start = n.getCollectionOfPrimitiveValues<number>(); },
        "status": n => { event.status = n.getStringValue(); },
        "title": n => { event.title = n.getStringValue(); },
        "uid": n => { event.uid = n.getStringValue(); },
        "url": n => { event.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEvent_duration(event_duration: Partial<Event_duration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGeo(geo: Partial<Geo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lat": n => { geo.lat = n.getNumberValue(); },
        "lon": n => { geo.lon = n.getNumberValue(); },
        "radius": n => { geo.radius = n.getNumberValue(); },
    }
}
export interface Event extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The categories property
     */
    categories?: string[] | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The duration property
     */
    duration?: Event_duration[] | null;
    /**
     * The geo property
     */
    geo?: Geo | null;
    /**
     * The location property
     */
    location?: string | null;
    /**
     * The product_id property
     */
    productId?: string | null;
    /**
     * The sequence property
     */
    sequence?: number | null;
    /**
     * The start property
     */
    start?: number[] | null;
    /**
     * The status property
     */
    status?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The uid property
     */
    uid?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
export interface Event_duration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface Geo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The lat property
     */
    lat?: number | null;
    /**
     * The lon property
     */
    lon?: number | null;
    /**
     * The radius property
     */
    radius?: number | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEvent(writer: SerializationWriter, event: Partial<Event> | undefined | null = {}) : void {
    if (event) {
        writer.writeCollectionOfPrimitiveValues<string>("categories", event.categories);
        writer.writeStringValue("description", event.description);
        writer.writeCollectionOfObjectValues<Event_duration>("duration", event.duration, serializeEvent_duration);
        writer.writeObjectValue<Geo>("geo", event.geo, serializeGeo);
        writer.writeStringValue("location", event.location);
        writer.writeStringValue("product_id", event.productId);
        writer.writeNumberValue("sequence", event.sequence);
        writer.writeCollectionOfPrimitiveValues<number>("start", event.start);
        writer.writeStringValue("status", event.status);
        writer.writeStringValue("title", event.title);
        writer.writeStringValue("uid", event.uid);
        writer.writeStringValue("url", event.url);
        writer.writeAdditionalData(event.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEvent_duration(writer: SerializationWriter, event_duration: Partial<Event_duration> | undefined | null = {}) : void {
    if (event_duration) {
        writer.writeAdditionalData(event_duration.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGeo(writer: SerializationWriter, geo: Partial<Geo> | undefined | null = {}) : void {
    if (geo) {
        writer.writeNumberValue("lat", geo.lat);
        writer.writeNumberValue("lon", geo.lon);
        writer.writeNumberValue("radius", geo.radius);
        writer.writeAdditionalData(geo.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
